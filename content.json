{"posts":[{"title":"使用 hexo + githubpage建立免费博客站点","text":"创建你的github page1.进入https://github.com/new创建一个自己用户名+github.io为名字且可以公开访问的repository,我自己的是[0ws0.github.io](https://github.com/0ws0/0ws0.github.io) 2.进到该repository页面下进入settings下，并点击pages，则可以看到vist site点击跳转到github page首页 https://0ws0.github.io/ 使用 hexo 系统搭建博客1.安装相关环境和hexo https://learnku.com/articles/45697该系统依赖nodejs 1npm install -g hexo-cli 提示 npm 版本过低，按提示命令升级 npm 重新安装又报当前 node 版本无法支持新版 npm 运行 通过https://nodejs.org/en/nodejs官网直接下载 mac 最新版本搞定！ 2.使用其他hexo主题 https://zhuanlan.zhihu.com/p/137338730找到一个https://github.com/blinkfox/hexo-theme-matery 这个非常漂亮的主题，直接下到theme目录下就行， 改下对应配置里的主题名 3.写文章相关https://cloud.tencent.com/developer/article/16627334.最后将本地数据部署到 github修改 _config.yml 配置 deploy: type: git repository: git@github.com:JeffreyBool/jeffreybool.github.io.git branch: master 这个是让我觉得hexo 最让我爽的地方 12345678910111213hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 部署的时候报 hexo ERROR Deployer not found: git 解决办法就是装一个插件就行 1npm install hexo-deployer-git --save 组合命令，爽歪歪~~~ 12345hexo s -g # 生成并本地预览hexo d -g # 生成并上传hexo clean 最终效果 https://0ws0.github.io/","link":"/2024/03/11/20240321-1/"},{"title":"HTML教程","text":"通用声明 123456789101112 HTML5&lt;!DOCTYPE html&gt; 以上代码是 HTML5 的文档类型声明，它告诉浏览器当前页面是使用 HTML5 规范编写的，HTML5 是最新的 HTML 版本，拥有更多的功能和优化，因此推荐在新的 Web 页面中使用它。HTML 4.01(估计都是很久完的网页了)&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;XHTML 1.0&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt; 查看完整网页声明类型 DOCTYPE 参考手册。 HTML中所有标签，属性等均用小写 HTML 文档 HTML 文档由HTML 元素定义 嵌套的 HTML 元素 大多数 HTML 元素可以嵌套（HTML 元素可以包含其他 HTML 元素）。 HTML 文档由相互嵌套的 HTML 元素构成。 HTML 元素语法HTML 元素以开始标签起始HTML 元素以结束标签终止元素的内容是开始标签与结束标签之间的内容某些 HTML 元素具有空内容（empty content）空元素在开始标签中进行关闭（以开始标签的结束而结束）比如 HTML 属性HTML 元素可以设置属性属性可以在元素中添加附加信息属性一般描述于开始标签属性总是以名称/值对的形式出现，比如：name=”value”","link":"/2024/03/14/20240331-1/"},{"title":"vue3学习笔记","text":"","link":"/2024/04/01/20240401-1/"},{"title":"git常用命令","text":"程序员必备技能之 Git常用命令拉取代码1git clone xxx.git 创建分支12345git branch dev# orgit checkout -b dev# orgit switch -c dev 切换本地分支123git checkout dev# orgit switch dev 切换分支并关联远程分支123git checkout -b dev origin/dev# orgit checkout --track origin/dev 查看本地所有分支1git branch 查看远程所有分支1git branch -r 删除本地分支1git branch -d dev 删除远程分支1git push origin -d dev 将代码从工作区添加暂存区1git add . 查看尚未暂存的更新1git diff 添加提交信息（commit 注释写错，执行 git commit --amend 此时会进入默认 vim 编辑器，修改注释后保存）1git commit -m 'xxxx' 推送代码到远程分支1234git push origin dev# 强制推送（常在 git rebase 或 git reset 后使用）git push -f origin dev 拉取远程分支代码1git pull origin dev 合并分支1git merge dev 查看 git 状态1git status 查看提交历史1git log 查看可引用的历史版本记录1git reflog 把本地未 push 的分叉提交历史整理成直线1git rebase origin/dev 回到 rebase 执行之前的状态1git rebase --abort 回退版本1234567# 回退指定 commit_id 版本git reset --hard commit_id# 回退上一个版本git reset --soft HEAD^# orgit reset --soft HEAD~1 撤销代码1git revert commit_id 1 修改分支名12345678# 第一步git branch -m oldBranchName newBranchName# 第二步git push origin :oldBranchName# 第三步git push --set-upstream origin newBranchName 查看 git 配置12345# 查看全局配置git config --global --list# 查看用户名git config --global user.name 添加用户名1git config --global --add user.name newName 删除用户名1git config --global --unset user.name 修改用户名1git config --global user.name newName 配置 Git 用户名和邮箱12345# 用户名git config --global user.name &quot;Your Name&quot;# 邮箱git config --global user.email &quot;email@example.com&quot; 统计代码行数1git ls-files | xargs wc -l 文件或文件夹重命名12Git` 在 `Windows` 和 `macOS` 的默认文件系统中对文件大小写修改是不敏感的。可能你会先删除文件并提交，然后再新建文件再提交，这样做很麻烦，下面的 `git mv` 就简化了繁琐的操作比如文件 `filename.ts` 或文件夹 `jsutils`，它们的相对路径分别是 `src/filename.ts` 和 `src/jsutils 1234567891011# 将 filename.ts 文件重命名为 fileName.ts，分下面两步# 第一步（注意下面的 name.ts 与 filename.ts 是不同的，如果你把 name.ts 改为 fileName.ts 是不行的，因为上面讲了仅大小写不同是不行的）git mv src/filename.ts src/name.ts# 第二步git mv src/name.ts src/fileName.ts# 将 jsutils 文件夹重命名为 jsUtils，分下面两步# 第一步git mv src/jsutils src/utils# 第二步git mv src/utils src/jsUtils 创建一个新的仓库1234567echo &quot;# test&quot; &gt;&gt; README.mdgit initgit add README.mdgit commit -m &quot;first commit&quot;git branch -M maingit remote add origin git@github.com:0ws0/test.gitgit push -u origin main 更新仓库远程地址123git remote add origin git@github.com:0ws0/test.gitgit branch -M maingit push -u origin main 如何贡献开源12345678910非常欢迎你的加入！提一个 Issue 或者提交一个 Pull Request。Pull Request:Fork 代码!创建自己的分支: git checkout -b feat/xxxx提交你的修改: git commit -am 'feat(function): add xxxxx'推送您的分支: git push origin feat/xxxx提交pull request 提交规范相关参考(opens new window) 12345678910111213feat: 增加新功能``fix: 修复问题/BUG``style: 代码风格相关无影响运行结果的``perf: 优化/性能提升``refactor: 重构``revert: 撤销修改``test: 测试相关``docs: 文档/注释``chore: 依赖更新/脚手架配置修改等``workflow: 工作流改进``ci: 持续集成``types: 类型定义文件更改``wip: 开发中 CodeReview 常用缩写PR（Pull Request）拉取请求，给其他项目提交代码LGTM（Looks Good To Me）代码已经过 review，可以合并SGTM（Sounds Good To Me）和上面那句意思差不多，也是已经通过了 review 的意思WIP（Work In Progress）如果有个改动很大的 PR，可以在写了一部分的情况下先提交，但需在标题写上 WIP，以告诉项目维护者这个功能还未完成，方便维护者提前 review 部分提交的代码PTAL（Please Take A Look）提示别人来看一下TBR（To Be Reviewed）提示维护者进行 reviewTL;DR（Too Long; Didn’t Read）太长懒得看TBD（To Be Done(or Defined/Discussed/Decided/Determined)） 一般表示还没搞定","link":"/2024/04/04/20240414-1/"},{"title":"vscode 使用笔记","text":"安装推荐插件项目根目录下有一个 .vscode 文件夹，它是专属这个项目的 vscode 配置。其中 extensions.json 文件是用来配置本项目推荐的插件： 一键安装上图中推荐的插件，只需要如下图操作即可： 安装完成后可能会提示你重启 vscode，照做即可。 注意：Vue3 项目对应的是 Volar 插件，记得禁用 Vue2 的 Vetur 插件！","link":"/2024/04/17/20240417-1/"}],"tags":[{"name":"工作必备","slug":"工作必备","link":"/tags/%E5%B7%A5%E4%BD%9C%E5%BF%85%E5%A4%87/"},{"name":"前端学习","slug":"前端学习","link":"/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"},{"name":"建站达人","slug":"建站达人","link":"/tags/%E5%BB%BA%E7%AB%99%E8%BE%BE%E4%BA%BA/"}],"categories":[],"pages":[{"title":"beautiful","text":"","link":"/friends/index.html"},{"title":"pageName","text":"","link":"/tags/index.html"}]}